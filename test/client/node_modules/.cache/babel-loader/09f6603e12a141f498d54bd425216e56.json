{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\Computer-science\\\\MyProject\\\\NNN\\\\test\\\\client\\\\src\\\\components\\\\Attributes.jsx\";\nimport React from \"react\";\nimport styles from \"./Attributes.module.css\";\nimport { AppContext } from \"./AppContext\";\nimport Attribute from \"./Attribute\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Attributes extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleClick = (el, index) => {\n      const {\n        attribute\n      } = this.props;\n      console.log(attribute);\n\n      if (attribute.items[index] === el) {\n        this.setState({\n          activeAttribute: attribute.items[index]\n        });\n      }\n    };\n  }\n\n  render() {\n    const {\n      attributeName,\n      attributeSize,\n      attributeColor,\n      attributes,\n      onSelectAttribute\n    } = this.props;\n    const {\n      activeAttribute,\n      activeAttributeInd\n    } = this.context;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: styles.ul,\n        children: attributes && attributes.map((attribute, id) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: attributeName,\n            children: attribute.name\n          }, `${attribute.id}_${attribute.name}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: styles.attributeGroup // onClick={(e) => onSelectAttribute(attribute, attribute.id, e)}\n              ,\n              children: /*#__PURE__*/_jsxDEV(Attribute // key={el.id}\n              // el={el}\n              // index={index}\n              , {\n                handleClick: this.handleClick,\n                attribute: attribute,\n                attributeColor: attributeColor,\n                attributeSize: attributeSize,\n                activeAttribute: activeAttribute,\n                activeAttributeInd: activeAttributeInd\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 49\n              }, this)\n            }, attribute.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 37\n            }, this)\n          }, attribute.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nAttributes.contextType = AppContext;\nexport default Attributes; // {\n//     attribute.items &&\n//     attribute.items.map((el, index) => (\n//         <Attribute\n//             key={el.id}\n//             el={el}\n//             index={index}\n//             attribute={attribute}\n//             attributeColor={attributeColor}\n//             attributeSize={attributeSize}\n//             activeAttribute={activeAttribute}\n//             activeAttributeInd={activeAttributeInd}\n//         />\n//     <li key={el.id}\n//         onClick={() => this.handleClick(attribute,attribute.id, el, index)}\n//         // onClick={(e) => onSelectAttribute(attribute, attribute.id, el, index, e)}\n//         className={`${styles.attribute} ${attribute.name === 'Color' ? attributeColor : attributeSize}\n// ${  activeAttribute === el && attribute.id? styles.activeAttribute : ''} `}\n//         style={{backgroundColor: el.value}}\n//     >{attribute.name === 'Color' ? '': el.value}{this.state.value}\n//     </li>\n//     ))\n// }","map":{"version":3,"names":["React","styles","AppContext","Attribute","Attributes","Component","handleClick","el","index","attribute","props","console","log","items","setState","activeAttribute","render","attributeName","attributeSize","attributeColor","attributes","onSelectAttribute","activeAttributeInd","context","ul","map","id","name","attributeGroup","contextType"],"sources":["D:/Downloads/Computer-science/MyProject/NNN/test/client/src/components/Attributes.jsx"],"sourcesContent":["import React from \"react\";\r\nimport styles from \"./Attributes.module.css\"\r\nimport {AppContext} from \"./AppContext\"\r\nimport Attribute from \"./Attribute\"\r\n\r\nclass Attributes extends React.Component {\r\n\r\n    handleClick = (el, index) => {\r\n        const {attribute} = this.props\r\nconsole.log(attribute)\r\n        if (attribute.items[index] === el) {\r\n            this.setState({\r\n                activeAttribute: attribute.items[index]\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {attributeName, attributeSize, attributeColor, attributes, onSelectAttribute} = this.props\r\n        const {  activeAttribute, activeAttributeInd} = this.context\r\n\r\n        return (\r\n            <>\r\n                <ul className={styles.ul}>\r\n                    {\r\n                        attributes &&\r\n                        attributes.map((attribute, id) => (\r\n                            <>\r\n                                <li className={attributeName}  key={`${attribute.id}_${attribute.name}`}>\r\n                                    {attribute.name}</li>\r\n                                <li  key={attribute.id}  >\r\n                                    <ul key={attribute.name} className={styles.attributeGroup}\r\n                                        // onClick={(e) => onSelectAttribute(attribute, attribute.id, e)}\r\n                                    >\r\n\r\n                                                <Attribute\r\n                                                    // key={el.id}\r\n                                                    // el={el}\r\n                                                    // index={index}\r\n                                                    handleClick={this.handleClick}\r\n                                                    attribute={attribute}\r\n                                                    attributeColor={attributeColor}\r\n                                                    attributeSize={attributeSize}\r\n                                                    activeAttribute={activeAttribute}\r\n                                                    activeAttributeInd={activeAttributeInd}\r\n                                                />\r\n\r\n                                    </ul>\r\n                                </li>\r\n                            </>\r\n                        ))\r\n                    }\r\n                </ul>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nAttributes.contextType = AppContext;\r\n\r\nexport default Attributes;\r\n\r\n// {\r\n//     attribute.items &&\r\n//     attribute.items.map((el, index) => (\r\n//         <Attribute\r\n//             key={el.id}\r\n//             el={el}\r\n//             index={index}\r\n//             attribute={attribute}\r\n//             attributeColor={attributeColor}\r\n//             attributeSize={attributeSize}\r\n//             activeAttribute={activeAttribute}\r\n//             activeAttributeInd={activeAttributeInd}\r\n//         />\r\n        //     <li key={el.id}\r\n        //         onClick={() => this.handleClick(attribute,attribute.id, el, index)}\r\n        //         // onClick={(e) => onSelectAttribute(attribute, attribute.id, el, index, e)}\r\n        //         className={`${styles.attribute} ${attribute.name === 'Color' ? attributeColor : attributeSize}\r\n        // ${  activeAttribute === el && attribute.id? styles.activeAttribute : ''} `}\r\n        //         style={{backgroundColor: el.value}}\r\n        //     >{attribute.name === 'Color' ? '': el.value}{this.state.value}\r\n        //     </li>\r\n//     ))\r\n// }"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAAQC,UAAR,QAAyB,cAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;EAAA;IAAA;;IAAA,KAErCC,WAFqC,GAEvB,CAACC,EAAD,EAAKC,KAAL,KAAe;MACzB,MAAM;QAACC;MAAD,IAAc,KAAKC,KAAzB;MACRC,OAAO,CAACC,GAAR,CAAYH,SAAZ;;MACQ,IAAIA,SAAS,CAACI,KAAV,CAAgBL,KAAhB,MAA2BD,EAA/B,EAAmC;QAC/B,KAAKO,QAAL,CAAc;UACVC,eAAe,EAAEN,SAAS,CAACI,KAAV,CAAgBL,KAAhB;QADP,CAAd;MAGH;IACJ,CAVoC;EAAA;;EAYrCQ,MAAM,GAAG;IACL,MAAM;MAACC,aAAD;MAAgBC,aAAhB;MAA+BC,cAA/B;MAA+CC,UAA/C;MAA2DC;IAA3D,IAAgF,KAAKX,KAA3F;IACA,MAAM;MAAGK,eAAH;MAAoBO;IAApB,IAA0C,KAAKC,OAArD;IAEA,oBACI;MAAA,uBACI;QAAI,SAAS,EAAEtB,MAAM,CAACuB,EAAtB;QAAA,UAEQJ,UAAU,IACVA,UAAU,CAACK,GAAX,CAAe,CAAChB,SAAD,EAAYiB,EAAZ,kBACX;UAAA,wBACI;YAAI,SAAS,EAAET,aAAf;YAAA,UACKR,SAAS,CAACkB;UADf,GAAqC,GAAElB,SAAS,CAACiB,EAAG,IAAGjB,SAAS,CAACkB,IAAK,EAAtE;YAAA;YAAA;YAAA;UAAA,QADJ,eAGI;YAAA,uBACI;cAAyB,SAAS,EAAE1B,MAAM,CAAC2B,cAA3C,CACI;cADJ;cAAA,uBAIY,QAAC,SAAD,CACI;cACA;cACA;cAHJ;gBAII,WAAW,EAAE,KAAKtB,WAJtB;gBAKI,SAAS,EAAEG,SALf;gBAMI,cAAc,EAAEU,cANpB;gBAOI,aAAa,EAAED,aAPnB;gBAQI,eAAe,EAAEH,eARrB;gBASI,kBAAkB,EAAEO;cATxB;gBAAA;gBAAA;gBAAA;cAAA;YAJZ,GAASb,SAAS,CAACkB,IAAnB;cAAA;cAAA;cAAA;YAAA;UADJ,GAAUlB,SAAS,CAACiB,EAApB;YAAA;YAAA;YAAA;UAAA,QAHJ;QAAA,gBADJ;MAHR;QAAA;QAAA;QAAA;MAAA;IADJ,iBADJ;EAkCH;;AAlDoC;;AAqDzCtB,UAAU,CAACyB,WAAX,GAAyB3B,UAAzB;AAEA,eAAeE,UAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACR;AACA"},"metadata":{},"sourceType":"module"}