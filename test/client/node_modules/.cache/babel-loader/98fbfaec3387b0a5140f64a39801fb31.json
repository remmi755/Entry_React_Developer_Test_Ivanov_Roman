{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\Computer-science\\\\MyProject\\\\NNN\\\\test\\\\client\\\\src\\\\App.js\";\nimport React from \"react\";\nimport { Route, Routes, useParams } from \"react-router-dom\";\nimport { Category, Header } from \"./components\";\nimport Cart from \"./components/Cart\";\nimport { apolloClient } from \"./index\";\nimport { gql } from \"@apollo/client\";\nimport PDP from \"./components/Pdp\"; // import {useParams} from \"react-router-dom\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function withRouter(Children) {\n  var _s = $RefreshSig$();\n\n  return _s(props => {\n    _s();\n\n    const match = {\n      params: useParams()\n    };\n    return /*#__PURE__*/_jsxDEV(Children, { ...props,\n      match: match\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 16\n    }, this);\n  }, \"zmUErVVHtqqM6DIDQ9M8H17P2nM=\", false, function () {\n    return [useParams];\n  });\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderCards = async () => {\n      try {\n        const result = await apolloClient.query({\n          query: gql`\n                    query Query {\n                        categories {\n                            name\n                            products {\n                                id\n                                name\n                                category\n                                prices {\n                                    currency {\n                                        symbol\n                                    }\n                                    amount\n                                }\n                                brand\n                                attributes {\n                                    items {\n                                        id\n                                        value\n                                        displayValue\n                                    }\n                                    id\n                                    name\n                                    type\n                                }\n                                inStock\n                                gallery\n                                description\n                            }\n                        }\n                    }\n                `\n        });\n        const categories = result.data.categories; // const prices = result.data.product.prices[0].amount\n\n        this.setState({\n          productCards: categories // prices: prices\n\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.renderPDP = async () => {\n      try {\n        const result = await apolloClient.query({\n          query: gql`\n                    query Product($productId: String!) {\n                        product(id: $productId) {\n                            id\n                            name\n                            inStock\n                            gallery\n                            description\n                            category\n                            prices {\n                                amount\n                                currency {\n                                    symbol\n                                    label\n                                }\n                            }\n                            brand\n                            attributes {\n                                id\n                                name\n                                type\n                                items {\n                                    id\n                                    value\n                                    displayValue\n                                }\n                            }\n                        }\n                    }\n                `,\n          variables: {\n            productId: this.props.match.params['cardId'].substring(1)\n          }\n        });\n        const product = result.data.product;\n        const attributes = result.data.product.attributes;\n        const allAttributes = result.data.product.attributes;\n        const prices = result.data.product.prices[0].amount;\n        this.setState({\n          product: product,\n          attributes: attributes,\n          allAttributes: allAttributes,\n          prices: prices\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.clickOnButton = () => {\n      alert(123);\n    };\n\n    this.onSelectCategories = index => {\n      this.setState({\n        activeItem: index\n      });\n    };\n\n    this.state = {\n      productCards: [this.renderCards],\n      activeItem: 0,\n      products: [this.renderCards],\n      // price: this.updateData,\n      product: [this.renderPDP]\n    };\n  }\n\n  componentDidMount() {\n    this.renderCards();\n    this.renderPDP();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.productCards !== this.state.productCards) {// console.log(this.state)\n      // this.setState({\n      //     productCards: this.categories[2]\n      // });\n    }\n  }\n\n  render() {\n    console.log(this.state.product); // console.log(this.state.productCards[0].products[0])\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onClick: this.onSelectCategories,\n        clickOnButton: this.clickOnButton,\n        productCards: this.state.productCards,\n        activeItem: this.state.activeItem,\n        update: this.state.updateData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Category, {\n            productCards: this.state.productCards,\n            activeItem: this.state.activeItem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 46\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/cart\",\n          element: /*#__PURE__*/_jsxDEV(Cart, {\n            onClick: this.clickOnButton,\n            productCards: this.state.productCards,\n            activeItem: this.state.activeItem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/:cardId\",\n          element: /*#__PURE__*/_jsxDEV(PDP, {\n            productCards: this.state.productCards,\n            activeItem: this.state.activeItem // update={this.updateData}\n            ,\n            product: this.state.product,\n            attributes: this.state.attributes,\n            prices: this.state.prices // prices={this.state.prices}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 53\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","Route","Routes","useParams","Category","Header","Cart","apolloClient","gql","PDP","withRouter","Children","props","match","params","App","Component","constructor","renderCards","result","query","categories","data","setState","productCards","err","console","log","renderPDP","variables","productId","substring","product","attributes","allAttributes","prices","amount","clickOnButton","alert","onSelectCategories","index","activeItem","state","products","componentDidMount","componentDidUpdate","prevProps","prevState","render","updateData"],"sources":["D:/Downloads/Computer-science/MyProject/NNN/test/client/src/App.js"],"sourcesContent":["import React from \"react\";\nimport {Route, Routes, useParams} from \"react-router-dom\";\nimport {Category, Header} from \"./components\"\nimport Cart from \"./components/Cart\";\nimport {apolloClient} from \"./index\";\nimport {gql} from \"@apollo/client\";\nimport PDP from \"./components/Pdp\";\n// import {useParams} from \"react-router-dom\";\n\nexport function withRouter(Children) {\n    return (props) => {\n        const match = {params: useParams()};\n        return <Children {...props} match={match}/>\n    }\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            productCards: [this.renderCards],\n            activeItem: 0,\n            products: [this.renderCards],\n            // price: this.updateData,\n            product: [this.renderPDP],\n        }\n    }\n\n    renderCards = async () => {\n        try {\n            const result = await apolloClient\n            .query({\n                query: gql`\n                    query Query {\n                        categories {\n                            name\n                            products {\n                                id\n                                name\n                                category\n                                prices {\n                                    currency {\n                                        symbol\n                                    }\n                                    amount\n                                }\n                                brand\n                                attributes {\n                                    items {\n                                        id\n                                        value\n                                        displayValue\n                                    }\n                                    id\n                                    name\n                                    type\n                                }\n                                inStock\n                                gallery\n                                description\n                            }\n                        }\n                    }\n                `\n            });\n            const categories = result.data.categories;\n            // const prices = result.data.product.prices[0].amount\n\n            this.setState({\n                productCards: categories,\n                // prices: prices\n            });\n\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    renderPDP = async () => {\n        try {\n            const result = await apolloClient\n            .query({\n                query: gql`\n                    query Product($productId: String!) {\n                        product(id: $productId) {\n                            id\n                            name\n                            inStock\n                            gallery\n                            description\n                            category\n                            prices {\n                                amount\n                                currency {\n                                    symbol\n                                    label\n                                }\n                            }\n                            brand\n                            attributes {\n                                id\n                                name\n                                type\n                                items {\n                                    id\n                                    value\n                                    displayValue\n                                }\n                            }\n                        }\n                    }\n                `, variables: {productId: this.props.match.params['cardId'].substring(1)}\n            });\n            const product = result.data.product\n            const attributes = result.data.product.attributes\n            const allAttributes = result.data.product.attributes\n            const prices = result.data.product.prices[0].amount\n\n            this.setState({\n                product: product,\n                attributes: attributes,\n                allAttributes: allAttributes,\n                prices: prices,\n            });\n\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    componentDidMount() {\n        this.renderCards();\n        this.renderPDP();\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.productCards !== this.state.productCards) {\n            // console.log(this.state)\n            // this.setState({\n            //     productCards: this.categories[2]\n            // });\n        }\n    }\n\n    clickOnButton = () => {\n        alert(123)\n    }\n\n    // updateData = (value) => {\n    //     this.setState({\n    //         price: value\n    //     })\n    // }\n\n    onSelectCategories = index => {\n        this.setState({\n            activeItem: index,\n        })\n    }\n\n    render() {\n        console.log(this.state.product)\n        // console.log(this.state.productCards[0].products[0])\n        return (\n            <div>\n                {/*<h2>My first Apollo app 🚀</h2>*/}\n                <Header onClick={this.onSelectCategories}\n                        clickOnButton={this.clickOnButton}\n                        productCards={this.state.productCards}\n                        activeItem={this.state.activeItem}\n                        update={this.state.updateData}\n                />\n                <Routes>\n                    <Route path=\"/\" element={<Category\n                        productCards={this.state.productCards}\n                        activeItem={this.state.activeItem}\n                    />}\n                    />\n                    <Route path=\"/cart\" element={<Cart\n                        onClick={this.clickOnButton}\n                        productCards={this.state.productCards}\n                        activeItem={this.state.activeItem}/>}\n                    />\n                    <Route path=\"/:cardId\" element={<PDP\n                        productCards={this.state.productCards}\n                        activeItem={this.state.activeItem}\n                        // update={this.updateData}\n\n                        product={this.state.product}\n                        attributes={this.state.attributes}\n                        prices={this.state.prices}\n                        // prices={this.state.prices}\n                    />}\n                    />\n                </Routes>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(App);\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}