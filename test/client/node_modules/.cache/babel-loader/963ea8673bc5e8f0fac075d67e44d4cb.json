{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\Computer-science\\\\MyProject\\\\NNN\\\\test\\\\client\\\\src\\\\App.js\";\nimport React from \"react\";\nimport { Route, Routes, useParams } from \"react-router-dom\";\nimport { Category, Header } from \"./components\";\nimport Cart from \"./components/Cart\";\nimport { apolloClient } from \"./index\";\nimport { gql } from \"@apollo/client\";\nimport PDP from \"./components/Pdp\"; // import {useParams} from \"react-router-dom\";\n// export function withRouter(Children) {\n//     return (props) => {\n//         const match = {params: useParams()};\n//         return <Children {...props} match={match}/>\n//     }\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MyContext = /*#__PURE__*/React.createContext(\"\");\nconsole.log(MyContext);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderCards = async () => {\n      try {\n        const result = await apolloClient.query({\n          query: gql`\n                    query Query {\n                        categories {\n                            name\n                            products {\n                                id\n                                name\n                                category\n                                prices {\n                                    currency {\n                                        symbol\n                                    }\n                                    amount\n                                }\n                                brand\n                                attributes {\n                                    items {\n                                        id\n                                        value\n                                        displayValue\n                                    }\n                                    id\n                                    name\n                                    type\n                                }\n                                inStock\n                                gallery\n                                description\n                            }\n                        }\n                    }\n                `\n        });\n        const categories = result.data.categories;\n        const currenciesList = result.data.categories[this.state.activeItem].products[0].prices;\n        this.setState({\n          productCards: categories,\n          currencies: currenciesList\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.onSelectCategories = index => {\n      this.setState({\n        activeItem: index\n      });\n    };\n\n    this.onSelectCurrencies = (index, e) => {\n      this.setState({\n        activeCurrency: index,\n        selectedCurrency: e.target.innerText,\n        // selectedCurrency: this.props.currencies[this.state.activeCurrency].currency.symbol,\n        openPopup: false\n      });\n    };\n\n    this.onSelectAttributes = index => {\n      alert(index); // this.setState({\n      //     activeAttribute: index,\n      // })\n    };\n\n    this.onOpenPopup = () => {\n      this.setState({\n        openPopup: !this.state.openPopup\n      });\n    };\n\n    this.updateCartList = (cartList, newProduct, index) => {\n      if (newProduct.count === 0) {\n        return [...cartList.slice(0, index), ...cartList.slice(index + 1)];\n      }\n\n      if (index === -1) {\n        return [...cartList, newProduct];\n      }\n\n      return [...cartList.slice(0, index), newProduct, ...cartList.slice(index + 1)];\n    };\n\n    this.updateProduct = (getProduct, productInCart, quantity) => {\n      if (productInCart) {\n        return { ...productInCart,\n          totalPrice: productInCart.totalPrice + quantity * getProduct.price,\n          count: productInCart.count + quantity\n        };\n      }\n\n      return {\n        id: getProduct.id,\n        name: getProduct.name,\n        url: getProduct.url,\n        totalPrice: getProduct.price,\n        count: 1\n      };\n    };\n\n    this.addProductInCart = id => {\n      const {\n        cartList,\n        productCards\n      } = this.state;\n      this.setState(() => {\n        const getProduct = productCards.find(product => product.id === id);\n        const getProductIndex = cartList.findIndex(product => product.id === id);\n        const phoneInCart = cartList[getProductIndex];\n        const newPhone = this.updateProduct(getProduct, phoneInCart, 1);\n        const newArray = this.updateCartList(cartList, newPhone, getProductIndex);\n        return {\n          cartList: newArray\n        };\n      });\n    };\n\n    this.countDecrease = (product, id) => {\n      if (product.id === id) {\n        this.setState({\n          count: this.state.count - 1\n        });\n      }\n    };\n\n    this.onAddToCart = product => {\n      const {\n        cartList\n      } = this.state;\n      const newProduct = { ...product,\n        count: 1\n      };\n      let isInCart = false;\n      cartList.forEach(el => {\n        if (el.id === newProduct.id) {\n          isInCart = true;\n          this.setState({\n            count: ++el.count\n          });\n        }\n      });\n      if (!isInCart) this.setState({\n        cartList: [...cartList, newProduct]\n      }); // const newProduct = {...product, count : 1}\n      // this.setState({\n      //     cartList: [...cartList, newProduct]\n      // })\n    };\n\n    this.deleteCartItem = id => {\n      const {\n        cartList\n      } = this.state;\n      this.setState({\n        cartList: cartList.filter(el => el.id !== id)\n      }); // if (product.count === 0) {\n      //     return [...cartList.slice(0, index), ...cartList.slice(index + 1)];\n      // }\n    };\n\n    this.state = {\n      productCards: [this.renderCards],\n      activeItem: 0,\n      products: [this.renderCards],\n      openPopup: false,\n      activeCurrency: 0,\n      selectedCurrency: '$',\n      cartList: [],\n      activeAttribute: 0 // count: 1,\n\n    };\n  }\n\n  // renderPDP = async () => {\n  //     try {\n  //         const result = await apolloClient\n  //         .query({\n  //             query: gql`\n  //                 query Product($productId: String!) {\n  //                     product(id: $productId) {\n  //                         id\n  //                         name\n  //                         inStock\n  //                         gallery\n  //                         description\n  //                         category\n  //                         prices {\n  //                             amount\n  //                             currency {\n  //                                 symbol\n  //                                 label\n  //                             }\n  //                         }\n  //                         brand\n  //                         attributes {\n  //                             id\n  //                             name\n  //                             type\n  //                             items {\n  //                                 id\n  //                                 value\n  //                                 displayValue\n  //                             }\n  //                         }\n  //                     }\n  //                 }\n  //             `, variables: {productId: this.props.match.params['cardId'].substring(1)}\n  //         });\n  //         const product = result.data.product\n  //         const attributes = result.data.product.attributes\n  //         const allAttributes = result.data.product.attributes\n  //         const prices = result.data.product.prices[0].amount\n  //\n  //         this.setState({\n  //             product: product,\n  //             attributes: attributes,\n  //             allAttributes: allAttributes,\n  //             prices: prices,\n  //         });\n  //\n  //     } catch (err) {\n  //         console.log(err);\n  //     }\n  // };\n  componentDidMount() {\n    this.renderCards(); // this.renderPDP();\n\n    window.scrollTo(0, 0);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.productCards !== this.state.productCards) {}\n  }\n\n  render() {\n    // let {activeItem}= this.state\n    // console.log(this.state.productCards[activeItem].products)\n    console.log(this.state.cartList); // console.log(this.state.currenciesList)\n    // console.log(this.props.match.params['cardId'].substring(1))\n    // console.log(this.state.productCards[0].products[0])\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onClick: this.onSelectCategories,\n        onOpenPopup: this.onOpenPopup,\n        productCards: this.state.productCards,\n        activeItem: this.state.activeItem,\n        currencies: this.state.currencies,\n        openPopup: this.state.openPopup,\n        activeCurrency: this.state.activeCurrency,\n        selectedCurrency: this.state.selectedCurrency,\n        onSelectCurrencies: this.onSelectCurrencies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Category, {\n            productCards: this.state.productCards,\n            activeItem: this.state.activeItem,\n            activeCurrency: this.state.activeCurrency\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 46\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/cart\",\n          element: /*#__PURE__*/_jsxDEV(Cart, {\n            productCards: this.state.productCards,\n            activeCurrency: this.state.activeCurrency,\n            cartList: this.state.cartList,\n            count: this.state.count // countIncrease={this.countIncrease}\n            ,\n            countDecrease: this.countDecrease,\n            activeItem: this.state.activeItem,\n            deleteCartItem: this.deleteCartItem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/:cardId\",\n          element: /*#__PURE__*/_jsxDEV(PDP, {\n            productCards: this.state.productCards,\n            activeItem: this.state.activeItem,\n            activeCurrency: this.state.activeCurrency,\n            activeAttribute: this.state.activeAttribute,\n            onAddToCart: this.onAddToCart,\n            onSelectAttributes: this.onSelectAttributes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 53\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","Route","Routes","useParams","Category","Header","Cart","apolloClient","gql","PDP","MyContext","createContext","console","log","App","Component","constructor","props","renderCards","result","query","categories","data","currenciesList","state","activeItem","products","prices","setState","productCards","currencies","err","onSelectCategories","index","onSelectCurrencies","e","activeCurrency","selectedCurrency","target","innerText","openPopup","onSelectAttributes","alert","onOpenPopup","updateCartList","cartList","newProduct","count","slice","updateProduct","getProduct","productInCart","quantity","totalPrice","price","id","name","url","addProductInCart","find","product","getProductIndex","findIndex","phoneInCart","newPhone","newArray","countDecrease","onAddToCart","isInCart","forEach","el","deleteCartItem","filter","activeAttribute","componentDidMount","window","scrollTo","componentDidUpdate","prevProps","prevState","render"],"sources":["D:/Downloads/Computer-science/MyProject/NNN/test/client/src/App.js"],"sourcesContent":["import React from \"react\";\nimport {Route, Routes, useParams} from \"react-router-dom\";\nimport {Category, Header} from \"./components\"\nimport Cart from \"./components/Cart\";\nimport {apolloClient} from \"./index\";\nimport {gql} from \"@apollo/client\";\nimport PDP from \"./components/Pdp\";\n// import {useParams} from \"react-router-dom\";\n\n// export function withRouter(Children) {\n//     return (props) => {\n//         const match = {params: useParams()};\n//         return <Children {...props} match={match}/>\n//     }\n// }\n\nexport const MyContext = React.createContext(\"\");\nconsole.log(MyContext)\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            productCards: [this.renderCards],\n            activeItem: 0,\n            products: [this.renderCards],\n            openPopup: false,\n            activeCurrency: 0,\n            selectedCurrency: '$',\n            cartList: [],\n            activeAttribute: 0,\n            // count: 1,\n        }\n    }\n\n    renderCards = async () => {\n        try {\n            const result = await apolloClient\n            .query({\n                query: gql`\n                    query Query {\n                        categories {\n                            name\n                            products {\n                                id\n                                name\n                                category\n                                prices {\n                                    currency {\n                                        symbol\n                                    }\n                                    amount\n                                }\n                                brand\n                                attributes {\n                                    items {\n                                        id\n                                        value\n                                        displayValue\n                                    }\n                                    id\n                                    name\n                                    type\n                                }\n                                inStock\n                                gallery\n                                description\n                            }\n                        }\n                    }\n                `\n            });\n            const categories = result.data.categories;\n            const currenciesList = result.data.categories[this.state.activeItem].products[0].prices\n\n            this.setState({\n                productCards: categories,\n                currencies: currenciesList\n            });\n\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    // renderPDP = async () => {\n    //     try {\n    //         const result = await apolloClient\n    //         .query({\n    //             query: gql`\n    //                 query Product($productId: String!) {\n    //                     product(id: $productId) {\n    //                         id\n    //                         name\n    //                         inStock\n    //                         gallery\n    //                         description\n    //                         category\n    //                         prices {\n    //                             amount\n    //                             currency {\n    //                                 symbol\n    //                                 label\n    //                             }\n    //                         }\n    //                         brand\n    //                         attributes {\n    //                             id\n    //                             name\n    //                             type\n    //                             items {\n    //                                 id\n    //                                 value\n    //                                 displayValue\n    //                             }\n    //                         }\n    //                     }\n    //                 }\n    //             `, variables: {productId: this.props.match.params['cardId'].substring(1)}\n    //         });\n    //         const product = result.data.product\n    //         const attributes = result.data.product.attributes\n    //         const allAttributes = result.data.product.attributes\n    //         const prices = result.data.product.prices[0].amount\n    //\n    //         this.setState({\n    //             product: product,\n    //             attributes: attributes,\n    //             allAttributes: allAttributes,\n    //             prices: prices,\n    //         });\n    //\n    //     } catch (err) {\n    //         console.log(err);\n    //     }\n    // };\n\n    componentDidMount() {\n        this.renderCards();\n        // this.renderPDP();\n        window.scrollTo(0, 0);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.productCards !== this.state.productCards) {\n        }\n    }\n\n    onSelectCategories = index => {\n        this.setState({\n            activeItem: index,\n        })\n    }\n\n    onSelectCurrencies = (index, e) => {\n        this.setState({\n            activeCurrency: index,\n            selectedCurrency: e.target.innerText,\n            // selectedCurrency: this.props.currencies[this.state.activeCurrency].currency.symbol,\n            openPopup: false,\n        })\n    }\n\n    onSelectAttributes = (index) => {\n        alert(index)\n        // this.setState({\n        //     activeAttribute: index,\n        // })\n    }\n\n    onOpenPopup = () => {\n        this.setState({openPopup: !this.state.openPopup})\n    }\n\n    // countIncrease = (id) => {\n    //\n    //     console.log(id)\n    //\n    //     // this.setState((orders) => {\n    //     //\n    //     //     return (\n    //     //\n    //     //         orders.map((product) => {\n    //     //             if (product.id === id) {\n    //     //                 return {\n    //     //                     ...product,\n    //     //                     count: this.state.count + 1\n    //     //                 }\n    //     //             }\n    //     //         })\n    //     //     )\n    //     //\n    //     // })\n    //\n    //\n    //\n    //     // this.setState((orders) => {\n    //     //\n    //     //     return orders.map((product) => {\n    //     //\n    //     //         if(product.id === id) {\n    //     //             return {\n    //     //                 ...product,\n    //     //                 count: ++product.count\n    //     //             }\n    //     //         }\n    //     //\n    //     //         return product\n    //     //     })\n    //     //\n    //     // })\n    //\n    // }\n\n    updateCartList = (cartList, newProduct, index) => {\n        if (newProduct.count === 0) {\n            return [...cartList.slice(0, index), ...cartList.slice(index + 1)];\n        }\n\n        if (index === -1) {\n            return [...cartList, newProduct];\n        }\n\n        return [...cartList.slice(0, index), newProduct, ...cartList.slice(index + 1)];\n    };\n\n    updateProduct = (getProduct, productInCart, quantity) => {\n        if (productInCart) {\n            return {\n                ...productInCart,\n                totalPrice: productInCart.totalPrice + quantity * getProduct.price,\n                count: productInCart.count + quantity\n            };\n        }\n\n        return {\n            id: getProduct.id,\n            name: getProduct.name,\n            url: getProduct.url,\n            totalPrice: getProduct.price,\n            count: 1\n        };\n    };\n\n    addProductInCart = (id) => {\n        const { cartList, productCards} = this.state;\n\n        this.setState(() => {\n            const getProduct = productCards.find((product) => product.id === id);\n            const getProductIndex = cartList.findIndex((product) => product.id === id);\n            const phoneInCart = cartList[getProductIndex];\n\n            const newPhone = this.updateProduct(getProduct, phoneInCart, 1);\n            const newArray = this.updateCartList(cartList, newPhone, getProductIndex);\n\n            return {\n                cartList: newArray\n            };\n        });\n    };\n\n\n    countDecrease = (product, id) => {\n        if (product.id === id) {\n            this.setState({\n                count: this.state.count - 1\n            })\n        }\n\n\n    }\n\n    onAddToCart = (product) => {\n        const {cartList} = this.state\n        const newProduct = {...product, count: 1};\n        let isInCart = false;\n\n        cartList.forEach((el) => {\n            if (el.id === newProduct.id) {\n                isInCart = true;\n\n                this.setState({\n                    count: ++el.count\n                })\n            }\n        })\n        if (!isInCart)\n            this.setState({\n                cartList: [...cartList, newProduct]\n            })\n\n        // const newProduct = {...product, count : 1}\n        // this.setState({\n        //     cartList: [...cartList, newProduct]\n        // })\n    }\n\n    deleteCartItem = (id) => {\n        const {cartList} = this.state\n\n        this.setState({\n            cartList: cartList.filter(el => el.id !== id)\n        })\n        // if (product.count === 0) {\n        //     return [...cartList.slice(0, index), ...cartList.slice(index + 1)];\n        // }\n    }\n\n    render() {\n\n\n        // let {activeItem}= this.state\n        // console.log(this.state.productCards[activeItem].products)\n        console.log(this.state.cartList)\n        // console.log(this.state.currenciesList)\n        // console.log(this.props.match.params['cardId'].substring(1))\n        // console.log(this.state.productCards[0].products[0])\n        return (\n            <div>\n                {/*<h2>My first Apollo app 🚀</h2>*/}\n                <Header onClick={this.onSelectCategories}\n                        onOpenPopup={this.onOpenPopup}\n                        productCards={this.state.productCards}\n                        activeItem={this.state.activeItem}\n                        currencies={this.state.currencies}\n\n                        openPopup={this.state.openPopup}\n                        activeCurrency={this.state.activeCurrency}\n                        selectedCurrency={this.state.selectedCurrency}\n                        onSelectCurrencies={this.onSelectCurrencies}\n                />\n                <Routes>\n                    <Route path=\"/\" element={<Category\n                        productCards={this.state.productCards}\n                        activeItem={this.state.activeItem}\n                        activeCurrency={this.state.activeCurrency}\n                    />}\n                    />\n                    <Route path=\"/cart\" element={<Cart\n                        productCards={this.state.productCards}\n                        activeCurrency={this.state.activeCurrency}\n                        cartList={this.state.cartList}\n                        count={this.state.count}\n                        // countIncrease={this.countIncrease}\n                        countDecrease={this.countDecrease}\n                        activeItem={this.state.activeItem}\n                        deleteCartItem={this.deleteCartItem}\n\n\n                    />}\n                    />\n                    <Route path=\"/:cardId\" element={<PDP\n                        productCards={this.state.productCards}\n                        activeItem={this.state.activeItem}\n                        activeCurrency={this.state.activeCurrency}\n                        activeAttribute={this.state.activeAttribute}\n\n                        onAddToCart={this.onAddToCart}\n                        onSelectAttributes={this.onSelectAttributes}\n\n                    />}\n                    />\n                </Routes>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}