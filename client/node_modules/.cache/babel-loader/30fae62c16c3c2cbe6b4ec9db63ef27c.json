{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { fetchProductItem } from \"../fetchProduct\";\nexport const fetchProduct = createAsyncThunk(\"pdp/fetchByStatus\", async variable => {\n  const {\n    data\n  } = await fetchProductItem(variable);\n  return data.product;\n}); // const attributes = [fetchProduct].attributes;\n// const prices = [fetchProduct].prices[this.props.activeCurrency].amount;\n// const symbol = [fetchProduct].prices[this.props.activeCurrency].currency.symbol;\n\nconst initialState = {\n  status: \"loading\",\n  product: [fetchProduct],\n  currentImgId: 0,\n  attributes: [fetchProduct].attributes,\n  price: setPrices(),\n  symbol: setSymbol\n};\nexport const pdpSlice = createSlice({\n  name: \"pdp\",\n  initialState,\n  reducers: {\n    onChangeImage: (state, action) => {\n      state.currentImgId = action.payload;\n    },\n    setPrices: (state, action) => {\n      var _state$product;\n\n      state.price = (_state$product = state.product) === null || _state$product === void 0 ? void 0 : _state$product.prices[action.payload].amount;\n    },\n    setSymbol: (state, action) => {\n      state.symbol = state.product.prices[action.payload].currency.symbol;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchProduct.pending, state => {\n      console.log(\"Идет отправка\");\n      state.status = 'loading';\n    });\n    builder.addCase(fetchProduct.fulfilled, (state, action) => {\n      console.log(\"Получение\");\n      state.product = action.payload;\n      state.status = 'success';\n    });\n    builder.addCase(fetchProduct.rejected, state => {\n      state.status = 'error';\n      state.product = [];\n    });\n  }\n});\nexport const {\n  onChangeImage,\n  setPrices,\n  setSymbol\n} = pdpSlice.actions;\nexport default pdpSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchProductItem","fetchProduct","variable","data","product","initialState","status","currentImgId","attributes","price","setPrices","symbol","setSymbol","pdpSlice","name","reducers","onChangeImage","state","action","payload","prices","amount","currency","extraReducers","builder","addCase","pending","console","log","fulfilled","rejected","actions","reducer"],"sources":["D:/Downloads/Computer-science/MyProject/Entry_React_Developer_Test_Ivanov_Roman/client/src/redux/pdp/slice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { fetchProductItem } from \"../fetchProduct\";\r\n\r\nexport const fetchProduct = createAsyncThunk(\r\n  \"pdp/fetchByStatus\",\r\n  async (variable) => {\r\n    const { data } = await fetchProductItem(variable);\r\n    return data.product;\r\n  }\r\n);\r\n\r\n// const attributes = [fetchProduct].attributes;\r\n// const prices = [fetchProduct].prices[this.props.activeCurrency].amount;\r\n// const symbol = [fetchProduct].prices[this.props.activeCurrency].currency.symbol;\r\n\r\nconst initialState = {\r\n  status: \"loading\",\r\n  product: [fetchProduct],\r\n  currentImgId: 0,\r\n  attributes: [fetchProduct].attributes,\r\n  price: setPrices(),\r\n  symbol: setSymbol\r\n};\r\n\r\nexport const pdpSlice = createSlice({\r\n  name: \"pdp\",\r\n  initialState,\r\n  reducers: {\r\n    onChangeImage: (state, action) => {\r\n      state.currentImgId = action.payload;\r\n    },\r\n\r\n    setPrices: (state, action) => {\r\n      state.price = state.product?.prices[action.payload].amount;\r\n    },\r\n\r\n    setSymbol: (state, action) => {\r\n      state.symbol = state.product.prices[action.payload].currency.symbol;\r\n    },\r\n\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchProduct.pending, (state) => {\r\n      console.log(\"Идет отправка\")\r\n      state.status = 'loading'\r\n\r\n    })\r\n    builder.addCase(fetchProduct.fulfilled, (state, action) => {\r\n      console.log(\"Получение\")\r\n      state.product = action.payload\r\n      state.status = 'success'\r\n    })\r\n    builder.addCase(fetchProduct.rejected, (state) => {\r\n      state.status = 'error'\r\n      state.product = []\r\n    })\r\n  },\r\n});\r\n\r\nexport const { onChangeImage, setPrices, setSymbol } = pdpSlice.actions;\r\n\r\nexport default pdpSlice.reducer;\r\n\r\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,SAASC,gBAAT,QAAiC,iBAAjC;AAEA,OAAO,MAAMC,YAAY,GAAGH,gBAAgB,CAC1C,mBAD0C,EAE1C,MAAOI,QAAP,IAAoB;EAClB,MAAM;IAAEC;EAAF,IAAW,MAAMH,gBAAgB,CAACE,QAAD,CAAvC;EACA,OAAOC,IAAI,CAACC,OAAZ;AACD,CALyC,CAArC,C,CAQP;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,SADW;EAEnBF,OAAO,EAAE,CAACH,YAAD,CAFU;EAGnBM,YAAY,EAAE,CAHK;EAInBC,UAAU,EAAE,CAACP,YAAD,EAAeO,UAJR;EAKnBC,KAAK,EAAEC,SAAS,EALG;EAMnBC,MAAM,EAAEC;AANW,CAArB;AASA,OAAO,MAAMC,QAAQ,GAAGd,WAAW,CAAC;EAClCe,IAAI,EAAE,KAD4B;EAElCT,YAFkC;EAGlCU,QAAQ,EAAE;IACRC,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAChCD,KAAK,CAACV,YAAN,GAAqBW,MAAM,CAACC,OAA5B;IACD,CAHO;IAKRT,SAAS,EAAE,CAACO,KAAD,EAAQC,MAAR,KAAmB;MAAA;;MAC5BD,KAAK,CAACR,KAAN,qBAAcQ,KAAK,CAACb,OAApB,mDAAc,eAAegB,MAAf,CAAsBF,MAAM,CAACC,OAA7B,EAAsCE,MAApD;IACD,CAPO;IASRT,SAAS,EAAE,CAACK,KAAD,EAAQC,MAAR,KAAmB;MAC5BD,KAAK,CAACN,MAAN,GAAeM,KAAK,CAACb,OAAN,CAAcgB,MAAd,CAAqBF,MAAM,CAACC,OAA5B,EAAqCG,QAArC,CAA8CX,MAA7D;IACD;EAXO,CAHwB;EAiBlCY,aAAa,EAAGC,OAAD,IAAa;IAC1BA,OAAO,CAACC,OAAR,CAAgBxB,YAAY,CAACyB,OAA7B,EAAuCT,KAAD,IAAW;MAC/CU,OAAO,CAACC,GAAR,CAAY,eAAZ;MACAX,KAAK,CAACX,MAAN,GAAe,SAAf;IAED,CAJD;IAKAkB,OAAO,CAACC,OAAR,CAAgBxB,YAAY,CAAC4B,SAA7B,EAAwC,CAACZ,KAAD,EAAQC,MAAR,KAAmB;MACzDS,OAAO,CAACC,GAAR,CAAY,WAAZ;MACAX,KAAK,CAACb,OAAN,GAAgBc,MAAM,CAACC,OAAvB;MACAF,KAAK,CAACX,MAAN,GAAe,SAAf;IACD,CAJD;IAKAkB,OAAO,CAACC,OAAR,CAAgBxB,YAAY,CAAC6B,QAA7B,EAAwCb,KAAD,IAAW;MAChDA,KAAK,CAACX,MAAN,GAAe,OAAf;MACAW,KAAK,CAACb,OAAN,GAAgB,EAAhB;IACD,CAHD;EAID;AAhCiC,CAAD,CAA5B;AAmCP,OAAO,MAAM;EAAEY,aAAF;EAAiBN,SAAjB;EAA4BE;AAA5B,IAA0CC,QAAQ,CAACkB,OAAzD;AAEP,eAAelB,QAAQ,CAACmB,OAAxB"},"metadata":{},"sourceType":"module"}