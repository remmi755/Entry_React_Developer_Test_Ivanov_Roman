{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { fetchProductItem } from \"../fetchProduct\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"../../pages/Pdp\";\nimport { store } from \"../store/store\";\nexport const fetchProduct = createAsyncThunk(\"currencies/fetchByStatus\", async () => {\n  const {\n    data\n  } = await fetchProductItem();\n  return data.product;\n});\nconst reduxStore = store.getState();\nconsole.log(reduxStore);\nconst attributes = [fetchProduct].attributes;\nconst prices = [fetchProduct].prices[this.props.activeCurrency].amount;\nconst symbol = [fetchProduct].prices[this.props.activeCurrency].currency.symbol;\nconst initialState = {\n  status: \"loading\",\n  product: [fetchProduct],\n  currentImgId: 0,\n  attributes: attributes,\n  prices: prices,\n  symbol: symbol\n};\nexport const pdpSlice = createSlice({\n  name: \"pdp\",\n  initialState,\n  reducers: {\n    onChangeImage: (state, action) => {\n      state.currentImgId = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchProduct.pending, state => {\n      console.log(\"Идет отправка\");\n      state.status = 'loading';\n    });\n    builder.addCase(fetchProduct.fulfilled, (state, action) => {\n      console.log(\"Получение\");\n      state.product = action.payload;\n      state.status = 'success';\n    });\n    builder.addCase(fetchProduct.rejected, state => {\n      state.status = 'error';\n      state.product = [];\n    });\n  }\n});\nexport const {\n  onChangeImage\n} = pdpSlice.actions;\nexport default pdpSlice.reducer; // const mapStateToProps = (state) => ({\n//   activeCurrency: state.currencies.activeCurrency,\n// });\n//\n//\n//\n// export default withRouter(connect(mapStateToProps )(pdpSlice.reducer))","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchProductItem","connect","withRouter","store","fetchProduct","data","product","reduxStore","getState","console","log","attributes","prices","props","activeCurrency","amount","symbol","currency","initialState","status","currentImgId","pdpSlice","name","reducers","onChangeImage","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["D:/Downloads/Computer-science/MyProject/Entry_React_Developer_Test_Ivanov_Roman/client/src/redux/pdp/slice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { fetchProductItem } from \"../fetchProduct\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"../../pages/Pdp\";\r\nimport { store } from \"../store/store\";\r\n\r\nexport const fetchProduct = createAsyncThunk(\r\n  \"currencies/fetchByStatus\",\r\n  async () => {\r\n    const { data } = await fetchProductItem();\r\n    return data.product;\r\n  }\r\n);\r\nconst reduxStore = store.getState()\r\nconsole.log(reduxStore)\r\nconst attributes = [fetchProduct].attributes;\r\nconst prices = [fetchProduct].prices[this.props.activeCurrency].amount;\r\nconst symbol = [fetchProduct].prices[this.props.activeCurrency].currency.symbol;\r\n\r\nconst initialState = {\r\n  status: \"loading\",\r\n  product: [fetchProduct],\r\n  currentImgId: 0,\r\n  attributes: attributes,\r\n  prices: prices,\r\n  symbol: symbol\r\n};\r\n\r\nexport const pdpSlice = createSlice({\r\n  name: \"pdp\",\r\n  initialState,\r\n  reducers: {\r\n    onChangeImage: (state, action) => {\r\n      state.currentImgId = action.payload;\r\n    },\r\n\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchProduct.pending, (state) => {\r\n      console.log(\"Идет отправка\")\r\n      state.status = 'loading'\r\n\r\n    })\r\n    builder.addCase(fetchProduct.fulfilled, (state, action) => {\r\n      console.log(\"Получение\")\r\n      state.product = action.payload\r\n      state.status = 'success'\r\n    })\r\n    builder.addCase(fetchProduct.rejected, (state) => {\r\n      state.status = 'error'\r\n      state.product = []\r\n    })\r\n  },\r\n});\r\n\r\nexport const { onChangeImage } = pdpSlice.actions;\r\n\r\nexport default pdpSlice.reducer;\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   activeCurrency: state.currencies.activeCurrency,\r\n// });\r\n//\r\n//\r\n//\r\n// export default withRouter(connect(mapStateToProps )(pdpSlice.reducer))"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAO,MAAMC,YAAY,GAAGN,gBAAgB,CAC1C,0BAD0C,EAE1C,YAAY;EACV,MAAM;IAAEO;EAAF,IAAW,MAAML,gBAAgB,EAAvC;EACA,OAAOK,IAAI,CAACC,OAAZ;AACD,CALyC,CAArC;AAOP,MAAMC,UAAU,GAAGJ,KAAK,CAACK,QAAN,EAAnB;AACAC,OAAO,CAACC,GAAR,CAAYH,UAAZ;AACA,MAAMI,UAAU,GAAG,CAACP,YAAD,EAAeO,UAAlC;AACA,MAAMC,MAAM,GAAG,CAACR,YAAD,EAAeQ,MAAf,CAAsB,KAAKC,KAAL,CAAWC,cAAjC,EAAiDC,MAAhE;AACA,MAAMC,MAAM,GAAG,CAACZ,YAAD,EAAeQ,MAAf,CAAsB,KAAKC,KAAL,CAAWC,cAAjC,EAAiDG,QAAjD,CAA0DD,MAAzE;AAEA,MAAME,YAAY,GAAG;EACnBC,MAAM,EAAE,SADW;EAEnBb,OAAO,EAAE,CAACF,YAAD,CAFU;EAGnBgB,YAAY,EAAE,CAHK;EAInBT,UAAU,EAAEA,UAJO;EAKnBC,MAAM,EAAEA,MALW;EAMnBI,MAAM,EAAEA;AANW,CAArB;AASA,OAAO,MAAMK,QAAQ,GAAGtB,WAAW,CAAC;EAClCuB,IAAI,EAAE,KAD4B;EAElCJ,YAFkC;EAGlCK,QAAQ,EAAE;IACRC,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAChCD,KAAK,CAACL,YAAN,GAAqBM,MAAM,CAACC,OAA5B;IACD;EAHO,CAHwB;EASlCC,aAAa,EAAGC,OAAD,IAAa;IAC1BA,OAAO,CAACC,OAAR,CAAgB1B,YAAY,CAAC2B,OAA7B,EAAuCN,KAAD,IAAW;MAC/ChB,OAAO,CAACC,GAAR,CAAY,eAAZ;MACAe,KAAK,CAACN,MAAN,GAAe,SAAf;IAED,CAJD;IAKAU,OAAO,CAACC,OAAR,CAAgB1B,YAAY,CAAC4B,SAA7B,EAAwC,CAACP,KAAD,EAAQC,MAAR,KAAmB;MACzDjB,OAAO,CAACC,GAAR,CAAY,WAAZ;MACAe,KAAK,CAACnB,OAAN,GAAgBoB,MAAM,CAACC,OAAvB;MACAF,KAAK,CAACN,MAAN,GAAe,SAAf;IACD,CAJD;IAKAU,OAAO,CAACC,OAAR,CAAgB1B,YAAY,CAAC6B,QAA7B,EAAwCR,KAAD,IAAW;MAChDA,KAAK,CAACN,MAAN,GAAe,OAAf;MACAM,KAAK,CAACnB,OAAN,GAAgB,EAAhB;IACD,CAHD;EAID;AAxBiC,CAAD,CAA5B;AA2BP,OAAO,MAAM;EAAEkB;AAAF,IAAoBH,QAAQ,CAACa,OAAnC;AAEP,eAAeb,QAAQ,CAACc,OAAxB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}