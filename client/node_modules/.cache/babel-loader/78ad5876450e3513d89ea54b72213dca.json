{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\Computer-science\\\\MyProject\\\\Entry_React_Developer_Test_Ivanov_Roman\\\\test\\\\client\\\\src\\\\App.js\";\nimport React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport Category from \"./pages/Category\";\nimport Header from \"./pages/Header\";\nimport Cart from \"./pages/Cart\";\nimport { apolloClient } from \"./index\";\nimport { gql } from \"@apollo/client\";\nimport PDP from \"./pages/Pdp\";\nimport { AppContext } from \"./components/AppContext\";\nimport Modal from \"./components/Modal\";\nimport CartOverlay from \"./components/CartOverlay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderCards = async () => {\n      try {\n        const result = await apolloClient.query({\n          query: gql`\n                    query Query {\n                        categories {\n                            name\n                            products {\n                                id\n                                name\n                                category\n                                prices {\n                                    currency {\n                                        symbol\n                                        label\n                                    }\n                                    amount\n                                }\n                                brand\n                                attributes {\n                                    items {\n                                        id\n                                        value\n                                        displayValue\n                                    }\n                                    id\n                                    name\n                                    type\n                                }\n                                inStock\n                                gallery\n                                description\n                            }\n                        }\n                    }\n                `\n        });\n        const categories = result.data.categories;\n        const currenciesList = result.data.categories[this.state.activeItem].products[0].prices;\n        this.setState({\n          productCards: categories,\n          currencies: currenciesList\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.getCartFromLS = () => {\n      const data = localStorage.getItem('cart');\n      return data ? JSON.parse(data) : [];\n    };\n\n    this.onSelectCategories = index => {\n      this.setState({\n        activeItem: index\n      });\n    };\n\n    this.onSelectCurrencies = index => {\n      const {\n        currencies\n      } = this.state;\n      this.setState({\n        activeCurrency: index,\n        selectedCurrency: currencies[index].currency.symbol,\n        openPopup: false\n      });\n    };\n\n    this.onOpenPopup = () => {\n      this.setState({\n        openPopup: !this.state.openPopup\n      });\n    };\n\n    this.onSelectAttribute = (attribute, el, index) => {\n      // if(product.id === id) {\n      this.setState({\n        activeAttributeIndex: index,\n        activeAttribute: attribute,\n        activeAttributeItem: attribute.items[index]\n      }); // }\n      // el = {...el,isActive: true}\n      // console.log(this.state.cartList)\n      // console.log(id)\n      // console.log(el)\n      // console.log(index)\n      // console.log(attribute.items[index])\n    };\n\n    this.onAddToCart = product => {\n      const {\n        cartList,\n        activeAttribute,\n        activeAttributeItem,\n        activeAttributeIndex\n      } = this.state; // product = {...product,isActive: true}\n\n      console.log(product);\n      let newProduct; // console.log(activeAttribute)\n      // console.log(activeAttributeItem)\n      // console.log(product.attributes)\n\n      if (product.inStock && !product.isInCart) {\n        let newAttributes = product.attributes;\n        newAttributes.forEach(attribute => {\n          if (attribute === activeAttribute) {\n            attribute.items.forEach(el => {\n              if (el === activeAttributeItem) {\n                // product.attributes = [...product.attributes,{...attribute,items:[...{...el, isActive:true}]}]\n                el.isActiven = true; // const newAttributes = product.attributes[0].items[activeAttributeIndex]\n                //   newAttributes.isActive = true\n              }\n            });\n          }\n        }); // newAttributes.isActive= true\n\n        console.log(newAttributes); // product.attributes = [{items:[{...el, isActive:true]}]\n\n        console.log(product.attributes[0].items[activeAttributeIndex]); // let attr =\n\n        newProduct = {\n          // attribute: activeAttribute,\n          attributes: product.attributes,\n          activeAttribute: activeAttribute,\n          activeAttributeItem: activeAttributeItem,\n          brand: product.brand,\n          prices: product.prices,\n          gallery: product.gallery,\n          id: product.id,\n          inStock: product.inStock,\n          name: product.name,\n          count: 1,\n          isInCart: false\n        };\n      } // console.log(newProduct)\n      // console.log(newProduct.activeAttribute.items[activeAttributeIndex])\n\n\n      cartList.forEach(el => {\n        // if (el.id === newProduct.id ) {\n        if (el.id === newProduct.id) {\n          newProduct.isInCart = true;\n          el.attributes.map((attribute, index) => {\n            if (attribute === activeAttribute) {\n              attribute.items.map((elem, elemInd) => {\n                console.log(newProduct.attributes[0].items[index]);\n\n                if (elem === activeAttributeItem) {// elem.classList.add('styles.activeAttribute')\n                  // newProduct.attributes[index].items[elemInd].isActive = true\n                }\n              });\n            }\n          });\n          this.setState({\n            count: ++el.count\n          });\n        }\n      });\n      console.log(newProduct);\n\n      if (newProduct.isInCart && newProduct.inStock) {\n        this.setState({\n          count: ++this.state.count\n        });\n        let newProductChanged = { ...newProduct,\n          count: this.state.count\n        };\n        cartList.forEach(el => {\n          if (el.id === newProduct.id) {\n            newProduct = newProductChanged;\n          }\n        });\n        localStorage.setItem('cart', JSON.stringify(cartList));\n      } else if (!newProduct.isInCart && newProduct.inStock) {\n        newProduct.isInCart = true;\n        localStorage.setItem('cart', JSON.stringify([...cartList, newProduct]));\n        this.setState({\n          cartList: JSON.parse(localStorage.getItem('cart'))\n        });\n      }\n    };\n\n    this.deleteCartItem = id => {\n      const {\n        cartList\n      } = this.state;\n      const index = cartList.findIndex(x => x.id === id);\n      cartList.splice(index, 1);\n      localStorage.setItem('cart', JSON.stringify(cartList));\n    };\n\n    this.countIncrease = (product, id) => {\n      const {\n        cartList\n      } = this.state;\n\n      if (product.id === id) {\n        this.setState({\n          count: ++product.count\n        });\n      }\n\n      let newProductChanged = { ...product,\n        count: ++this.state.count\n      };\n      cartList.forEach(el => {\n        if (el.id === product.id) {\n          product = newProductChanged;\n        }\n      });\n      localStorage.setItem('cart', JSON.stringify(cartList));\n    };\n\n    this.countDecrease = (product, id) => {\n      const {\n        cartList\n      } = this.state;\n\n      if (product.id === id) {\n        this.setState({\n          count: product.count - 1 > 0 ? --product.count : this.deleteCartItem(id)\n        });\n      }\n\n      let newProductChanged = { ...product,\n        count: --this.state.count\n      };\n      cartList.forEach(el => {\n        if (el.id === product.id) {\n          product = newProductChanged;\n        }\n      });\n      localStorage.setItem('cart', JSON.stringify(cartList));\n    };\n\n    this.toggleModal = () => {\n      this.setState({\n        modalShow: !this.state.modalShow\n      });\n    };\n\n    this.onHidePopup = () => {\n      document.body.style.overflow = \"\";\n      this.setState({\n        modalShow: false\n      });\n    };\n\n    this.state = {\n      isInCart: false,\n      modalShow: false,\n      count: 1,\n      productCards: [this.renderCards],\n      activeItem: 0,\n      products: [this.renderCards],\n      openPopup: false,\n      activeCurrency: 0,\n      selectedCurrency: '$',\n      cartList: this.getCartFromLS(),\n      activeAttributeItem: 0,\n      activeAttributeIndex: 0,\n      activeAttribute: '',\n      total: {\n        totalPrice: 0,\n        totalCount: 0\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.renderCards();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.count !== this.state.count) {// console.log('Ok')\n    }\n  }\n\n  render() {\n    let totalPrice = this.state.cartList.reduce((prev, curr) => {\n      return prev + curr.prices[this.state.activeCurrency].amount * curr.count;\n    }, 0).toFixed(2);\n    let totalCount = this.state.cartList.reduce((prev, curr) => {\n      return prev + curr.count;\n    }, 0); // console.log(this.state.cartList)\n    // console.log(this.state.activeAttribute)\n\n    const {\n      productCards,\n      activeCurrency,\n      cartList,\n      count,\n      currencies,\n      activeItem,\n      selectedCurrency,\n      total,\n      openPopup,\n      modalShow,\n      activeAttributeItem,\n      activeAttribute,\n      activeAttributeIndex\n    } = this.state;\n    const {\n      deleteCartItem,\n      countIncrease,\n      countDecrease,\n      onHidePopup,\n      onSelectAttribute,\n      getCartFromLS,\n      onSelectCategories,\n      onOpenPopup,\n      onSelectCurrencies,\n      toggleModal,\n      onAddToCart\n    } = this; // console.log(activeAttribute)\n    // console.log(activeAttributeItem)\n\n    return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n      value: {\n        totalCount,\n        modalShow,\n        totalPrice,\n        productCards,\n        activeCurrency,\n        currencies,\n        openPopup,\n        activeAttributeIndex,\n        cartList,\n        count,\n        activeItem,\n        selectedCurrency,\n        total,\n        activeAttributeItem,\n        activeAttribute,\n        deleteCartItem,\n        countIncrease,\n        countDecrease,\n        onHidePopup,\n        onSelectAttribute,\n        getCartFromLS,\n        onSelectCategories,\n        onOpenPopup,\n        onSelectCurrencies,\n        toggleModal,\n        onAddToCart\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          onOpenPopup: this.onOpenPopup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(Category, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 50\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/cart\",\n            element: /*#__PURE__*/_jsxDEV(Cart, {\n              activeCurrency: this.state.activeCurrency,\n              cartList: this.state.cartList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 54\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/:cardId\",\n            element: /*#__PURE__*/_jsxDEV(PDP, {\n              activeCurrency: this.state.activeCurrency\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 57\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          className: modalShow ? document.body.style.overflow = \"hidden\" : document.body.style.overflow = \"\",\n          close: toggleModal,\n          shown: modalShow,\n          children: /*#__PURE__*/_jsxDEV(CartOverlay, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","Route","Routes","Category","Header","Cart","apolloClient","gql","PDP","AppContext","Modal","CartOverlay","App","Component","constructor","props","renderCards","result","query","categories","data","currenciesList","state","activeItem","products","prices","setState","productCards","currencies","err","console","log","getCartFromLS","localStorage","getItem","JSON","parse","onSelectCategories","index","onSelectCurrencies","activeCurrency","selectedCurrency","currency","symbol","openPopup","onOpenPopup","onSelectAttribute","attribute","el","activeAttributeIndex","activeAttribute","activeAttributeItem","items","onAddToCart","product","cartList","newProduct","inStock","isInCart","newAttributes","attributes","forEach","isActiven","brand","gallery","id","name","count","map","elem","elemInd","newProductChanged","setItem","stringify","deleteCartItem","findIndex","x","splice","countIncrease","countDecrease","toggleModal","modalShow","onHidePopup","document","body","style","overflow","total","totalPrice","totalCount","componentDidMount","componentDidUpdate","prevProps","prevState","render","reduce","prev","curr","amount","toFixed"],"sources":["D:/Downloads/Computer-science/MyProject/Entry_React_Developer_Test_Ivanov_Roman/test/client/src/App.js"],"sourcesContent":["import React from \"react\";\nimport {Route, Routes} from \"react-router-dom\";\nimport Category from \"./pages/Category\"\nimport Header from \"./pages/Header\"\nimport Cart from \"./pages/Cart\";\nimport {apolloClient} from \"./index\";\nimport {gql} from \"@apollo/client\";\nimport PDP from \"./pages/Pdp\";\nimport {AppContext} from \"./components/AppContext\"\nimport Modal from \"./components/Modal\"\nimport CartOverlay from \"./components/CartOverlay\"\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isInCart: false,\n            modalShow: false,\n            count: 1,\n            productCards: [this.renderCards],\n            activeItem: 0,\n            products: [this.renderCards],\n            openPopup: false,\n            activeCurrency: 0,\n            selectedCurrency: '$',\n            cartList: this.getCartFromLS(),\n            activeAttributeItem: 0,\n            activeAttributeIndex: 0,\n            activeAttribute: '',\n            total: {\n                totalPrice: 0,\n                totalCount: 0\n            }\n        }\n    }\n\n    renderCards = async () => {\n        try {\n            const result = await apolloClient\n            .query({\n                query: gql`\n                    query Query {\n                        categories {\n                            name\n                            products {\n                                id\n                                name\n                                category\n                                prices {\n                                    currency {\n                                        symbol\n                                        label\n                                    }\n                                    amount\n                                }\n                                brand\n                                attributes {\n                                    items {\n                                        id\n                                        value\n                                        displayValue\n                                    }\n                                    id\n                                    name\n                                    type\n                                }\n                                inStock\n                                gallery\n                                description\n                            }\n                        }\n                    }\n                `\n            });\n            const categories = result.data.categories;\n            const currenciesList = result.data.categories[this.state.activeItem].products[0].prices\n\n            this.setState({\n                productCards: categories,\n                currencies: currenciesList\n            });\n\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    componentDidMount() {\n        this.renderCards();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.count !== this.state.count) {\n            // console.log('Ok')\n        }\n    }\n\n    getCartFromLS = () => {\n        const data = localStorage.getItem('cart')\n        return data ? JSON.parse(data) : [];\n    }\n\n    onSelectCategories = index => {\n        this.setState({\n            activeItem: index,\n        })\n    }\n\n    onSelectCurrencies = (index) => {\n        const {currencies} = this.state\n        this.setState({\n            activeCurrency: index,\n            selectedCurrency: currencies[index].currency.symbol,\n            openPopup: false,\n        })\n    }\n\n    onOpenPopup = () => {\n        this.setState({openPopup: !this.state.openPopup})\n    }\n\n    // onSelectAttribute = ( attribute, id, el, index) => {\n    onSelectAttribute = (attribute, el, index) => {\n        // if(product.id === id) {\n            this.setState({\n                activeAttributeIndex: index,\n                activeAttribute: attribute,\n                activeAttributeItem: attribute.items[index]\n            })\n        // }\n        // el = {...el,isActive: true}\n        // console.log(this.state.cartList)\n        // console.log(id)\n        // console.log(el)\n        // console.log(index)\n        // console.log(attribute.items[index])\n    }\n\n    onAddToCart = (product) => {\n        const {cartList, activeAttribute, activeAttributeItem, activeAttributeIndex} = this.state;\n        // product = {...product,isActive: true}\n        console.log(product)\n        let newProduct;\n\n        // console.log(activeAttribute)\n        // console.log(activeAttributeItem)\n        // console.log(product.attributes)\n\n        if (product.inStock && !product.isInCart) {\n            let newAttributes = product.attributes\n\n            newAttributes.forEach((attribute) => {\n                if(attribute === activeAttribute) {\n                    attribute.items.forEach((el) => {\n                        if(el === activeAttributeItem) {\n                            // product.attributes = [...product.attributes,{...attribute,items:[...{...el, isActive:true}]}]\n                            el.isActiven = true\n                          // const newAttributes = product.attributes[0].items[activeAttributeIndex]\n                          //   newAttributes.isActive = true\n                        }\n                    })\n                }\n            })\n// newAttributes.isActive= true\n            console.log(newAttributes)\n// product.attributes = [{items:[{...el, isActive:true]}]\n            console.log(product.attributes[0].items[activeAttributeIndex])\n            // let attr =\n            newProduct = {\n                // attribute: activeAttribute,\n                attributes: product.attributes,\n                activeAttribute: activeAttribute,\n                activeAttributeItem: activeAttributeItem,\n                brand: product.brand,\n                prices: product.prices,\n                gallery: product.gallery,\n                id: product.id,\n                inStock: product.inStock,\n                name: product.name,\n                count: 1,\n                isInCart: false\n            }\n\n        }\n        // console.log(newProduct)\n        // console.log(newProduct.activeAttribute.items[activeAttributeIndex])\n\n        cartList.forEach((el) => {\n            // if (el.id === newProduct.id ) {\n            if (el.id === newProduct.id ) {\n                newProduct.isInCart = true;\n                el.attributes.map((attribute, index) => {\n                    if(attribute === activeAttribute) {\n                        attribute.items.map((elem, elemInd) => {\n                            console.log(newProduct.attributes[0].items[index])\n                            if(elem === activeAttributeItem) {\n                               // elem.classList.add('styles.activeAttribute')\n                                // newProduct.attributes[index].items[elemInd].isActive = true\n                            }\n                        })\n                    }\n                })\n                this.setState({\n                    count: ++el.count,\n                })\n            }\n        })\n        console.log(newProduct)\n        if (newProduct.isInCart && newProduct.inStock) {\n            this.setState({\n                count: ++this.state.count,\n            })\n\n            let newProductChanged = {...newProduct, count: this.state.count}\n\n            cartList.forEach((el) => {\n                if (el.id === newProduct.id) {\n                    newProduct = newProductChanged\n                }\n            })\n\n            localStorage.setItem('cart', JSON.stringify(cartList))\n        } else if (!newProduct.isInCart && newProduct.inStock) {\n            newProduct.isInCart = true\n            localStorage.setItem('cart', JSON.stringify([...cartList, newProduct]))\n            this.setState({\n                cartList: JSON.parse(localStorage.getItem('cart')),\n            })\n        }\n    }\n\n    deleteCartItem = (id) => {\n        const {cartList} = this.state\n        const index = cartList.findIndex(x => x.id === id);\n        cartList.splice(index,1)\n        localStorage.setItem('cart',JSON.stringify(cartList))\n    }\n\n    countIncrease = (product, id) => {\n        const {cartList} = this.state\n\n        if (product.id === id) {\n            this.setState({\n                count: ++product.count,\n            })\n        }\n\n        let newProductChanged = {...product, count: ++this.state.count}\n\n        cartList.forEach((el) => {\n            if (el.id === product.id) {\n                product = newProductChanged\n            }\n        })\n        localStorage.setItem('cart', JSON.stringify(cartList))\n    }\n\n    countDecrease = (product, id) => {\n        const {cartList} = this.state\n\n        if (product.id === id) {\n            this.setState({\n                count: product.count - 1 > 0 ? --product.count : this.deleteCartItem(id),\n            })\n        }\n\n        let newProductChanged = {...product, count: --this.state.count}\n\n        cartList.forEach((el) => {\n            if (el.id === product.id) {\n                product = newProductChanged\n            }\n        })\n        localStorage.setItem('cart', JSON.stringify(cartList))\n    }\n\n    toggleModal = () => {\n        this.setState({\n            modalShow: !this.state.modalShow\n        })\n    }\n\n    onHidePopup = () => {\n        document.body.style.overflow = \"\";\n        this.setState({\n            modalShow: false\n        })\n    }\n\n    render() {\n        let totalPrice = (this.state.cartList.reduce((prev, curr) => {\n            return prev + curr.prices[this.state.activeCurrency].amount * curr.count\n        }, 0)).toFixed(2)\n\n        let totalCount = this.state.cartList.reduce((prev, curr) => {\n            return prev + curr.count\n        }, 0)\n\n        // console.log(this.state.cartList)\n        // console.log(this.state.activeAttribute)\n\n        const {\n            productCards,\n            activeCurrency,\n            cartList,\n            count,\n            currencies,\n            activeItem,\n            selectedCurrency,\n            total,\n            openPopup,\n            modalShow,\n            activeAttributeItem,\n            activeAttribute,\n            activeAttributeIndex\n        } = this.state\n        const {deleteCartItem, countIncrease, countDecrease, onHidePopup, onSelectAttribute, getCartFromLS,\n            onSelectCategories, onOpenPopup, onSelectCurrencies, toggleModal, onAddToCart} = this;\n\n        // console.log(activeAttribute)\n        // console.log(activeAttributeItem)\n\n        return (\n            <AppContext.Provider\n                value={{\n                    totalCount, modalShow,\n                    totalPrice, productCards, activeCurrency, currencies, openPopup, activeAttributeIndex,\n                    cartList, count, activeItem, selectedCurrency, total, activeAttributeItem,  activeAttribute,\n                    deleteCartItem, countIncrease, countDecrease, onHidePopup, onSelectAttribute, getCartFromLS,\n                    onSelectCategories, onOpenPopup, onSelectCurrencies, toggleModal, onAddToCart\n                }}\n            >\n                <div>\n                    <Header onOpenPopup={this.onOpenPopup}/>\n                    <Routes>\n                        <Route path=\"/\" element={<Category/>}/>\n                        <Route path=\"/cart\" element={<Cart\n                            activeCurrency={this.state.activeCurrency}\n                            cartList={this.state.cartList}\n                        />}\n                        />\n                        <Route path=\"/:cardId\" element={<PDP\n                            activeCurrency={this.state.activeCurrency}\n                        />}\n                        />\n                    </Routes>\n                    <Modal\n                        className={modalShow ? document.body.style.overflow = \"hidden\" :\n                            document.body.style.overflow = \"\"}\n                        close={toggleModal}\n                        shown={modalShow}\n                    >\n                        <CartOverlay/>\n                    </Modal>\n                </div>\n            </AppContext.Provider>\n        );\n    }\n}\n\nexport default App;\n\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,MAAf,QAA4B,kBAA5B;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,SAAQC,YAAR,QAA2B,SAA3B;AACA,SAAQC,GAAR,QAAkB,gBAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAAQC,UAAR,QAAyB,yBAAzB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;;;AAEA,MAAMC,GAAN,SAAkBZ,KAAK,CAACa,SAAxB,CAAkC;EAC9BC,WAAW,CAACC,KAAD,EAAQ;IACf,MAAMA,KAAN;;IADe,KAuBnBC,WAvBmB,GAuBL,YAAY;MACtB,IAAI;QACA,MAAMC,MAAM,GAAG,MAAMX,YAAY,CAChCY,KADoB,CACd;UACHA,KAAK,EAAEX,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QAjCmB,CADc,CAArB;QAoCA,MAAMY,UAAU,GAAGF,MAAM,CAACG,IAAP,CAAYD,UAA/B;QACA,MAAME,cAAc,GAAGJ,MAAM,CAACG,IAAP,CAAYD,UAAZ,CAAuB,KAAKG,KAAL,CAAWC,UAAlC,EAA8CC,QAA9C,CAAuD,CAAvD,EAA0DC,MAAjF;QAEA,KAAKC,QAAL,CAAc;UACVC,YAAY,EAAER,UADJ;UAEVS,UAAU,EAAEP;QAFF,CAAd;MAKH,CA7CD,CA6CE,OAAOQ,GAAP,EAAY;QACVC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACH;IACJ,CAxEkB;;IAAA,KAoFnBG,aApFmB,GAoFH,MAAM;MAClB,MAAMZ,IAAI,GAAGa,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAb;MACA,OAAOd,IAAI,GAAGe,IAAI,CAACC,KAAL,CAAWhB,IAAX,CAAH,GAAsB,EAAjC;IACH,CAvFkB;;IAAA,KAyFnBiB,kBAzFmB,GAyFEC,KAAK,IAAI;MAC1B,KAAKZ,QAAL,CAAc;QACVH,UAAU,EAAEe;MADF,CAAd;IAGH,CA7FkB;;IAAA,KA+FnBC,kBA/FmB,GA+FGD,KAAD,IAAW;MAC5B,MAAM;QAACV;MAAD,IAAe,KAAKN,KAA1B;MACA,KAAKI,QAAL,CAAc;QACVc,cAAc,EAAEF,KADN;QAEVG,gBAAgB,EAAEb,UAAU,CAACU,KAAD,CAAV,CAAkBI,QAAlB,CAA2BC,MAFnC;QAGVC,SAAS,EAAE;MAHD,CAAd;IAKH,CAtGkB;;IAAA,KAwGnBC,WAxGmB,GAwGL,MAAM;MAChB,KAAKnB,QAAL,CAAc;QAACkB,SAAS,EAAE,CAAC,KAAKtB,KAAL,CAAWsB;MAAxB,CAAd;IACH,CA1GkB;;IAAA,KA6GnBE,iBA7GmB,GA6GC,CAACC,SAAD,EAAYC,EAAZ,EAAgBV,KAAhB,KAA0B;MAC1C;MACI,KAAKZ,QAAL,CAAc;QACVuB,oBAAoB,EAAEX,KADZ;QAEVY,eAAe,EAAEH,SAFP;QAGVI,mBAAmB,EAAEJ,SAAS,CAACK,KAAV,CAAgBd,KAAhB;MAHX,CAAd,EAFsC,CAO1C;MACA;MACA;MACA;MACA;MACA;MACA;IACH,CA3HkB;;IAAA,KA6HnBe,WA7HmB,GA6HJC,OAAD,IAAa;MACvB,MAAM;QAACC,QAAD;QAAWL,eAAX;QAA4BC,mBAA5B;QAAiDF;MAAjD,IAAyE,KAAK3B,KAApF,CADuB,CAEvB;;MACAQ,OAAO,CAACC,GAAR,CAAYuB,OAAZ;MACA,IAAIE,UAAJ,CAJuB,CAMvB;MACA;MACA;;MAEA,IAAIF,OAAO,CAACG,OAAR,IAAmB,CAACH,OAAO,CAACI,QAAhC,EAA0C;QACtC,IAAIC,aAAa,GAAGL,OAAO,CAACM,UAA5B;QAEAD,aAAa,CAACE,OAAd,CAAuBd,SAAD,IAAe;UACjC,IAAGA,SAAS,KAAKG,eAAjB,EAAkC;YAC9BH,SAAS,CAACK,KAAV,CAAgBS,OAAhB,CAAyBb,EAAD,IAAQ;cAC5B,IAAGA,EAAE,KAAKG,mBAAV,EAA+B;gBAC3B;gBACAH,EAAE,CAACc,SAAH,GAAe,IAAf,CAF2B,CAG7B;gBACA;cACD;YACJ,CAPD;UAQH;QACJ,CAXD,EAHsC,CAelD;;QACYhC,OAAO,CAACC,GAAR,CAAY4B,aAAZ,EAhBsC,CAiBlD;;QACY7B,OAAO,CAACC,GAAR,CAAYuB,OAAO,CAACM,UAAR,CAAmB,CAAnB,EAAsBR,KAAtB,CAA4BH,oBAA5B,CAAZ,EAlBsC,CAmBtC;;QACAO,UAAU,GAAG;UACT;UACAI,UAAU,EAAEN,OAAO,CAACM,UAFX;UAGTV,eAAe,EAAEA,eAHR;UAITC,mBAAmB,EAAEA,mBAJZ;UAKTY,KAAK,EAAET,OAAO,CAACS,KALN;UAMTtC,MAAM,EAAE6B,OAAO,CAAC7B,MANP;UAOTuC,OAAO,EAAEV,OAAO,CAACU,OAPR;UAQTC,EAAE,EAAEX,OAAO,CAACW,EARH;UASTR,OAAO,EAAEH,OAAO,CAACG,OATR;UAUTS,IAAI,EAAEZ,OAAO,CAACY,IAVL;UAWTC,KAAK,EAAE,CAXE;UAYTT,QAAQ,EAAE;QAZD,CAAb;MAeH,CA7CsB,CA8CvB;MACA;;;MAEAH,QAAQ,CAACM,OAAT,CAAkBb,EAAD,IAAQ;QACrB;QACA,IAAIA,EAAE,CAACiB,EAAH,KAAUT,UAAU,CAACS,EAAzB,EAA8B;UAC1BT,UAAU,CAACE,QAAX,GAAsB,IAAtB;UACAV,EAAE,CAACY,UAAH,CAAcQ,GAAd,CAAkB,CAACrB,SAAD,EAAYT,KAAZ,KAAsB;YACpC,IAAGS,SAAS,KAAKG,eAAjB,EAAkC;cAC9BH,SAAS,CAACK,KAAV,CAAgBgB,GAAhB,CAAoB,CAACC,IAAD,EAAOC,OAAP,KAAmB;gBACnCxC,OAAO,CAACC,GAAR,CAAYyB,UAAU,CAACI,UAAX,CAAsB,CAAtB,EAAyBR,KAAzB,CAA+Bd,KAA/B,CAAZ;;gBACA,IAAG+B,IAAI,KAAKlB,mBAAZ,EAAiC,CAC9B;kBACC;gBACH;cACJ,CAND;YAOH;UACJ,CAVD;UAWA,KAAKzB,QAAL,CAAc;YACVyC,KAAK,EAAE,EAAEnB,EAAE,CAACmB;UADF,CAAd;QAGH;MACJ,CAnBD;MAoBArC,OAAO,CAACC,GAAR,CAAYyB,UAAZ;;MACA,IAAIA,UAAU,CAACE,QAAX,IAAuBF,UAAU,CAACC,OAAtC,EAA+C;QAC3C,KAAK/B,QAAL,CAAc;UACVyC,KAAK,EAAE,EAAE,KAAK7C,KAAL,CAAW6C;QADV,CAAd;QAIA,IAAII,iBAAiB,GAAG,EAAC,GAAGf,UAAJ;UAAgBW,KAAK,EAAE,KAAK7C,KAAL,CAAW6C;QAAlC,CAAxB;QAEAZ,QAAQ,CAACM,OAAT,CAAkBb,EAAD,IAAQ;UACrB,IAAIA,EAAE,CAACiB,EAAH,KAAUT,UAAU,CAACS,EAAzB,EAA6B;YACzBT,UAAU,GAAGe,iBAAb;UACH;QACJ,CAJD;QAMAtC,YAAY,CAACuC,OAAb,CAAqB,MAArB,EAA6BrC,IAAI,CAACsC,SAAL,CAAelB,QAAf,CAA7B;MACH,CAdD,MAcO,IAAI,CAACC,UAAU,CAACE,QAAZ,IAAwBF,UAAU,CAACC,OAAvC,EAAgD;QACnDD,UAAU,CAACE,QAAX,GAAsB,IAAtB;QACAzB,YAAY,CAACuC,OAAb,CAAqB,MAArB,EAA6BrC,IAAI,CAACsC,SAAL,CAAe,CAAC,GAAGlB,QAAJ,EAAcC,UAAd,CAAf,CAA7B;QACA,KAAK9B,QAAL,CAAc;UACV6B,QAAQ,EAAEpB,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX;QADA,CAAd;MAGH;IACJ,CAxNkB;;IAAA,KA0NnBwC,cA1NmB,GA0NDT,EAAD,IAAQ;MACrB,MAAM;QAACV;MAAD,IAAa,KAAKjC,KAAxB;MACA,MAAMgB,KAAK,GAAGiB,QAAQ,CAACoB,SAAT,CAAmBC,CAAC,IAAIA,CAAC,CAACX,EAAF,KAASA,EAAjC,CAAd;MACAV,QAAQ,CAACsB,MAAT,CAAgBvC,KAAhB,EAAsB,CAAtB;MACAL,YAAY,CAACuC,OAAb,CAAqB,MAArB,EAA4BrC,IAAI,CAACsC,SAAL,CAAelB,QAAf,CAA5B;IACH,CA/NkB;;IAAA,KAiOnBuB,aAjOmB,GAiOH,CAACxB,OAAD,EAAUW,EAAV,KAAiB;MAC7B,MAAM;QAACV;MAAD,IAAa,KAAKjC,KAAxB;;MAEA,IAAIgC,OAAO,CAACW,EAAR,KAAeA,EAAnB,EAAuB;QACnB,KAAKvC,QAAL,CAAc;UACVyC,KAAK,EAAE,EAAEb,OAAO,CAACa;QADP,CAAd;MAGH;;MAED,IAAII,iBAAiB,GAAG,EAAC,GAAGjB,OAAJ;QAAaa,KAAK,EAAE,EAAE,KAAK7C,KAAL,CAAW6C;MAAjC,CAAxB;MAEAZ,QAAQ,CAACM,OAAT,CAAkBb,EAAD,IAAQ;QACrB,IAAIA,EAAE,CAACiB,EAAH,KAAUX,OAAO,CAACW,EAAtB,EAA0B;UACtBX,OAAO,GAAGiB,iBAAV;QACH;MACJ,CAJD;MAKAtC,YAAY,CAACuC,OAAb,CAAqB,MAArB,EAA6BrC,IAAI,CAACsC,SAAL,CAAelB,QAAf,CAA7B;IACH,CAlPkB;;IAAA,KAoPnBwB,aApPmB,GAoPH,CAACzB,OAAD,EAAUW,EAAV,KAAiB;MAC7B,MAAM;QAACV;MAAD,IAAa,KAAKjC,KAAxB;;MAEA,IAAIgC,OAAO,CAACW,EAAR,KAAeA,EAAnB,EAAuB;QACnB,KAAKvC,QAAL,CAAc;UACVyC,KAAK,EAAEb,OAAO,CAACa,KAAR,GAAgB,CAAhB,GAAoB,CAApB,GAAwB,EAAEb,OAAO,CAACa,KAAlC,GAA0C,KAAKO,cAAL,CAAoBT,EAApB;QADvC,CAAd;MAGH;;MAED,IAAIM,iBAAiB,GAAG,EAAC,GAAGjB,OAAJ;QAAaa,KAAK,EAAE,EAAE,KAAK7C,KAAL,CAAW6C;MAAjC,CAAxB;MAEAZ,QAAQ,CAACM,OAAT,CAAkBb,EAAD,IAAQ;QACrB,IAAIA,EAAE,CAACiB,EAAH,KAAUX,OAAO,CAACW,EAAtB,EAA0B;UACtBX,OAAO,GAAGiB,iBAAV;QACH;MACJ,CAJD;MAKAtC,YAAY,CAACuC,OAAb,CAAqB,MAArB,EAA6BrC,IAAI,CAACsC,SAAL,CAAelB,QAAf,CAA7B;IACH,CArQkB;;IAAA,KAuQnByB,WAvQmB,GAuQL,MAAM;MAChB,KAAKtD,QAAL,CAAc;QACVuD,SAAS,EAAE,CAAC,KAAK3D,KAAL,CAAW2D;MADb,CAAd;IAGH,CA3QkB;;IAAA,KA6QnBC,WA7QmB,GA6QL,MAAM;MAChBC,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,QAApB,GAA+B,EAA/B;MACA,KAAK5D,QAAL,CAAc;QACVuD,SAAS,EAAE;MADD,CAAd;IAGH,CAlRkB;;IAEf,KAAK3D,KAAL,GAAa;MACToC,QAAQ,EAAE,KADD;MAETuB,SAAS,EAAE,KAFF;MAGTd,KAAK,EAAE,CAHE;MAITxC,YAAY,EAAE,CAAC,KAAKX,WAAN,CAJL;MAKTO,UAAU,EAAE,CALH;MAMTC,QAAQ,EAAE,CAAC,KAAKR,WAAN,CAND;MAOT4B,SAAS,EAAE,KAPF;MAQTJ,cAAc,EAAE,CARP;MASTC,gBAAgB,EAAE,GATT;MAUTc,QAAQ,EAAE,KAAKvB,aAAL,EAVD;MAWTmB,mBAAmB,EAAE,CAXZ;MAYTF,oBAAoB,EAAE,CAZb;MAaTC,eAAe,EAAE,EAbR;MAcTqC,KAAK,EAAE;QACHC,UAAU,EAAE,CADT;QAEHC,UAAU,EAAE;MAFT;IAdE,CAAb;EAmBH;;EAqDDC,iBAAiB,GAAG;IAChB,KAAK1E,WAAL;EACH;;EAED2E,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;IACrC,IAAIA,SAAS,CAAC1B,KAAV,KAAoB,KAAK7C,KAAL,CAAW6C,KAAnC,EAA0C,CACtC;IACH;EACJ;;EAkMD2B,MAAM,GAAG;IACL,IAAIN,UAAU,GAAI,KAAKlE,KAAL,CAAWiC,QAAX,CAAoBwC,MAApB,CAA2B,CAACC,IAAD,EAAOC,IAAP,KAAgB;MACzD,OAAOD,IAAI,GAAGC,IAAI,CAACxE,MAAL,CAAY,KAAKH,KAAL,CAAWkB,cAAvB,EAAuC0D,MAAvC,GAAgDD,IAAI,CAAC9B,KAAnE;IACH,CAFiB,EAEf,CAFe,CAAD,CAEVgC,OAFU,CAEF,CAFE,CAAjB;IAIA,IAAIV,UAAU,GAAG,KAAKnE,KAAL,CAAWiC,QAAX,CAAoBwC,MAApB,CAA2B,CAACC,IAAD,EAAOC,IAAP,KAAgB;MACxD,OAAOD,IAAI,GAAGC,IAAI,CAAC9B,KAAnB;IACH,CAFgB,EAEd,CAFc,CAAjB,CALK,CASL;IACA;;IAEA,MAAM;MACFxC,YADE;MAEFa,cAFE;MAGFe,QAHE;MAIFY,KAJE;MAKFvC,UALE;MAMFL,UANE;MAOFkB,gBAPE;MAQF8C,KARE;MASF3C,SATE;MAUFqC,SAVE;MAWF9B,mBAXE;MAYFD,eAZE;MAaFD;IAbE,IAcF,KAAK3B,KAdT;IAeA,MAAM;MAACoD,cAAD;MAAiBI,aAAjB;MAAgCC,aAAhC;MAA+CG,WAA/C;MAA4DpC,iBAA5D;MAA+Ed,aAA/E;MACFK,kBADE;MACkBQ,WADlB;MAC+BN,kBAD/B;MACmDyC,WADnD;MACgE3B;IADhE,IAC+E,IADrF,CA3BK,CA8BL;IACA;;IAEA,oBACI,QAAC,UAAD,CAAY,QAAZ;MACI,KAAK,EAAE;QACHoC,UADG;QACSR,SADT;QAEHO,UAFG;QAES7D,YAFT;QAEuBa,cAFvB;QAEuCZ,UAFvC;QAEmDgB,SAFnD;QAE8DK,oBAF9D;QAGHM,QAHG;QAGOY,KAHP;QAGc5C,UAHd;QAG0BkB,gBAH1B;QAG4C8C,KAH5C;QAGmDpC,mBAHnD;QAGyED,eAHzE;QAIHwB,cAJG;QAIaI,aAJb;QAI4BC,aAJ5B;QAI2CG,WAJ3C;QAIwDpC,iBAJxD;QAI2Ed,aAJ3E;QAKHK,kBALG;QAKiBQ,WALjB;QAK8BN,kBAL9B;QAKkDyC,WALlD;QAK+D3B;MAL/D,CADX;MAAA,uBASI;QAAA,wBACI,QAAC,MAAD;UAAQ,WAAW,EAAE,KAAKR;QAA1B;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI,QAAC,MAAD;UAAA,wBACI,QAAC,KAAD;YAAO,IAAI,EAAC,GAAZ;YAAgB,OAAO,eAAE,QAAC,QAAD;cAAA;cAAA;cAAA;YAAA;UAAzB;YAAA;YAAA;YAAA;UAAA,QADJ,eAEI,QAAC,KAAD;YAAO,IAAI,EAAC,OAAZ;YAAoB,OAAO,eAAE,QAAC,IAAD;cACzB,cAAc,EAAE,KAAKvB,KAAL,CAAWkB,cADF;cAEzB,QAAQ,EAAE,KAAKlB,KAAL,CAAWiC;YAFI;cAAA;cAAA;cAAA;YAAA;UAA7B;YAAA;YAAA;YAAA;UAAA,QAFJ,eAOI,QAAC,KAAD;YAAO,IAAI,EAAC,UAAZ;YAAuB,OAAO,eAAE,QAAC,GAAD;cAC5B,cAAc,EAAE,KAAKjC,KAAL,CAAWkB;YADC;cAAA;cAAA;cAAA;YAAA;UAAhC;YAAA;YAAA;YAAA;UAAA,QAPJ;QAAA;UAAA;UAAA;UAAA;QAAA,QAFJ,eAcI,QAAC,KAAD;UACI,SAAS,EAAEyC,SAAS,GAAGE,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,QAApB,GAA+B,QAAlC,GAChBH,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,QAApB,GAA+B,EAFvC;UAGI,KAAK,EAAEN,WAHX;UAII,KAAK,EAAEC,SAJX;UAAA,uBAMI,QAAC,WAAD;YAAA;YAAA;YAAA;UAAA;QANJ;UAAA;UAAA;UAAA;QAAA,QAdJ;MAAA;QAAA;QAAA;QAAA;MAAA;IATJ;MAAA;MAAA;MAAA;IAAA,QADJ;EAmCH;;AAzV6B;;AA4VlC,eAAerE,GAAf"},"metadata":{},"sourceType":"module"}